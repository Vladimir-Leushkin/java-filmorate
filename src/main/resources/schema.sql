CREATE TABLE IF NOT EXISTS mpa
(
    mpa_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa_name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name    VARCHAR NOT NULL,
    description  VARCHAR(200),
    release_date DATE,
    duration     INTEGER,
    mpa_id       INTEGER,
    CONSTRAINT mpa_fk
        FOREIGN KEY (mpa_id)
            REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name VARCHAR NOT NULL,
    email     VARCHAR NOT NULL,
    login     VARCHAR NOT NULL,
    birthday  DATE
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE CASCADE,
        PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS film_likes
(
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT film_likes_fk
        FOREIGN KEY (film_id)
            REFERENCES films (film_id),
    CONSTRAINT user_likes_fk
        FOREIGN KEY (user_id)
            REFERENCES users (user_id),
            PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS user_friends
(
    user_id   INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT user_friend_fk
        FOREIGN KEY (user_id)
            REFERENCES users (user_id),
            PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS directors
(
    director_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS film_directors
(
    film_id     INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    director_id INTEGER REFERENCES directors (director_id) ON DELETE CASCADE,
        PRIMARY KEY (film_id, director_id)

);

CREATE UNIQUE INDEX IF NOT EXISTS film_id_uindex
    ON films (film_id);

CREATE UNIQUE INDEX IF NOT EXISTS user_id_uindex
    ON users (user_id);

CREATE TABLE IF NOT EXISTS reviews
(
    id_review   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR(255),
    is_positive BOOLEAN,
    user_id     INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    film_id     INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    useful      INTEGER
);

CREATE TABLE IF NOT EXISTS reviews_ratings
(
    id_review INTEGER REFERENCES reviews (id_review) ON DELETE CASCADE,
    user_id   INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    rate      INTEGER NOT NULL,
        UNIQUE (id_review, user_id)
);

CREATE TYPE IF NOT EXISTS event_type AS ENUM ('LIKE', 'FRIEND', 'REVIEW');
CREATE TYPE IF NOT EXISTS operation_type AS ENUM ('REMOVE', 'ADD', 'UPDATE');

CREATE TABLE IF NOT EXISTS event
(
    id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_time TIMESTAMP default current_timestamp,
    user_id    INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    event_type EVENT_TYPE,
    operation  OPERATION_TYPE,
    entity_id  INTEGER
);